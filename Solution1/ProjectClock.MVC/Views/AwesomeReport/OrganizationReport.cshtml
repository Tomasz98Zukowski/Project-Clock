@using Microsoft.AspNetCore.Mvc.Localization
@using ProjectClock.BusinessLogic.Services.ExcelRaportServices

@model GenerateDataDto;

@inject IViewLocalizer Localizer

@{
    var labelsUser = new List<string>() { };
    var dataUser = new List<double>() { };
    var listUser = new List<LabelPlusTimeSpan>() { };

    var labelsProject = new List<string>() { };
    var dataProject = new List<double>() { };
    var listProject = new List<LabelPlusTimeSpan>() { };

    var userDatas = Model.organizationData.OrganizationDataUsers;
    var projectDatas = Model.organizationData.OrganizationDataProjects;
    var projectDataTotalHoursSum = userDatas.Select(pd => pd.TotalTime.TotalHours).Sum();

    foreach (var projectData in projectDatas)
    {
        if (projectData.TotalTime.TotalSeconds > 60)
        {
            dataProject.Add(Math.Round((projectData.TotalTime.TotalHours / projectDataTotalHoursSum), 2) * 100);
            labelsProject.Add(projectData.Name);
            listProject.Add(new LabelPlusTimeSpan()
            {
                        Name = projectData.Name,
                        Time = projectData.TotalTime
            });
        }
    }

    foreach (var userData in userDatas)
    {
        if (userData.TotalTime.TotalSeconds > 60)
        {
            dataUser.Add(Math.Round((userData.TotalTime.TotalHours / projectDataTotalHoursSum), 2) * 100);
            labelsUser.Add($"{userData.Name} {userData.Surname}");
            listUser.Add(new LabelPlusTimeSpan()
                    {
                        Name = userData.Name,
                        Surname = userData.Surname,
                        Time = userData.TotalTime
                    });
        }
    }
}

<style>
    .table-info {
        width: 100%;
    }

        .table-info th, .table-info td {
            width: 75%;
            text-align: left;
            padding: 7px;
        }
</style>

<h1 class="fw-bold mb-4 text-center">@Localizer["Title"]</h1>
<div class="container">
    <div class="sticky-top justify-content-center m-2">
        <div class="row d-none d-md-block">
            <div class="col-md-12">
                <div class="btn-group m-2">
                    <button type="button" class="btn btn-primary" onclick="setDateRange('this_week')">@Localizer["TWeek"]</button>
                    <button type="button" class="btn btn-primary" onclick="setDateRange('this_month')">@Localizer["TMonth"]</button>
                    <button type="button" class="btn btn-primary" onclick="setDateRange('this_year')">@Localizer["TYear"]</button>
                    <button type="button" class="btn btn-primary" onclick="setDateRange('last_week')">@Localizer["LWeek"]</button>
                    <button type="button" class="btn btn-primary" onclick="setDateRange('last_month')">@Localizer["LMonth"]</button>
                    <button type="button" class="btn btn-primary" onclick="setDateRange('last_year')">@Localizer["LYear"]</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <form asp-controller="AwesomeReport" asp-action="GenerateOrganizationAwesomeReport" method="post">
            <div class="container-fluid">

                <div class="form-group m-1">
                    <label asp-for="organizationId">@Localizer["Organization"]</label>
                    <select asp-for="organizationId" class="form-select form-select-lg">
                        @foreach (var organization in Model.organizations)
                        {
                            <option value="@organization.OrganizationId">@organization.OrganizationName</option>
                        }
                    </select>
                    <span asp-validation-for="organizationId" class="text-danger"></span>
                </div>
                <div class="row">
                    <div class="form-group m-1  col-sm-5">
                        <label asp-for="fromDate">@Localizer["From"]</label>
                        <input asp-for="fromDate" type="date" class="form-control" />
                        <span asp-validation-for="fromDate" class="text-danger"></span>
                    </div>
                    <div class="form-group m-1  col-sm-5">
                        <label asp-for="toDate">@Localizer["To"]</label>
                        <input asp-for="toDate" type="date" class="form-control" />
                        <span asp-validation-for="toDate" class="text-danger"></span>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary m-1">@Localizer["GenerateRaportButton"]</button>
            </div>
        </form>
    </div>

    <div class="row my-2 border-bottom">
        <div class="col-md-8">
            <table class="table-info bg-opacity-25 bg-white rounded r-3">
                <thead>
                    <tr class="border-bottom">
                        <th scope="col">@Localizer["Project"]</th>
                        <th scope="col">@Localizer["TotalTime"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in listProject)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@Math.Floor(item.Time.TotalHours) h @item.Time.Minutes m</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-4 my-2">
            <canvas id="myPieChartProject" width="750" height="750"></canvas>
        </div>
    </div>

    <div class="row my-2">
        <div class="col-md-8">
            <table class="table-info bg-opacity-25 bg-white rounded r-3">
                <thead>
                    <tr class="border-bottom">
                        <th scope="col">@Localizer["User"]</th>
                        <th scope="col">@Localizer["TotalTime"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in listUser)
                    {
                        <tr>
                            <td>@item.Name @item.Surname</td>
                            <td>@Math.Floor(item.Time.TotalHours) h @item.Time.Minutes m</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-4 my-2">
            <canvas id="myPieChartUser" width="750" height="750"></canvas>
        </div>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('myPieChartProject').getContext('2d');
    var myPieChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: @Html.Raw(Json.Serialize(labelsProject)),
            datasets: [{
                data: @Html.Raw(Json.Serialize(dataProject)),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(54, 162, 235, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(255, 241, 86, 0.7)',
                    'rgba(215, 99, 132, 0.7)',
                    'rgba(154, 162, 235, 0.7)',
                    'rgba(55, 206, 86, 0.7)',
                    'rgba(5, 241, 86, 0.7)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(54, 162, 235, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(255, 241, 86, 0.7)',
                    'rgba(215, 99, 132, 0.7)',
                    'rgba(154, 162, 235, 0.7)',
                    'rgba(55, 206, 86, 0.7)',
                    'rgba(5, 241, 86, 0.7)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
</script>
<script>
    var ctx = document.getElementById('myPieChartUser').getContext('2d');
    var myPieChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: @Html.Raw(Json.Serialize(labelsUser)),
            datasets: [{
                data: @Html.Raw(Json.Serialize(dataUser)),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(54, 162, 235, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(255, 241, 86, 0.7)',
                    'rgba(215, 99, 132, 0.7)',
                    'rgba(154, 162, 235, 0.7)',
                    'rgba(55, 206, 86, 0.7)',
                    'rgba(5, 241, 86, 0.7)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(54, 162, 235, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(255, 241, 86, 0.7)',
                    'rgba(215, 99, 132, 0.7)',
                    'rgba(154, 162, 235, 0.7)',
                    'rgba(55, 206, 86, 0.7)',
                    'rgba(5, 241, 86, 0.7)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
</script>
<script>
    function setDateRange(range) {
        var fromDateInputs = document.querySelectorAll('input[name="fromDate"]');
        var toDateInputs = document.querySelectorAll('input[name="toDate"]');
        var today = new Date();
        var dayOfWeek = today.getDay();
        var diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
        var monday = getPreviousMonday();

        switch (range) {
            case 'this_week':
                fromDateInputs.forEach(function (input) {
                    input.value = formatDate(monday);
                });
                toDateInputs.forEach(function (input) {
                    input.value = formatDate(new Date());
                });
                break;
            case 'this_month':
                var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                var lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                fromDateInputs.forEach(function (input) {
                    input.value = formatDate(firstDayOfMonth);
                });
                toDateInputs.forEach(function (input) {
                    input.value = formatDate(lastDayOfMonth);
                });
                break;
            case 'last_month':
                var firstDayOfLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                var lastDayOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
                fromDateInputs.forEach(function (input) {
                    input.value = formatDate(firstDayOfLastMonth);
                });
                toDateInputs.forEach(function (input) {
                    input.value = formatDate(lastDayOfLastMonth);
                });
                break;
            case 'last_week':
                var lastMonday = getMondayBeforeLast();
                var lastSunday = getLastSunday();
                fromDateInputs.forEach(function (input) {
                    input.value = formatDate(lastMonday);
                });
                toDateInputs.forEach(function (input) {
                    input.value = formatDate(lastSunday);
                });
                break;
            case 'this_year':
                var firstDayOfYear = new Date(today.getFullYear(), 0, 1);
                var lastDayOfYear = new Date(today.getFullYear(), 11, 31);
                fromDateInputs.forEach(function (input) {
                    input.value = formatDate(firstDayOfYear);
                });
                toDateInputs.forEach(function (input) {
                    input.value = formatDate(lastDayOfYear);
                });
                break;
            case 'last_year':
                var firstDayOfLastYear = new Date(today.getFullYear() - 1, 0, 1);
                var lastDayOfLastYear = new Date(today.getFullYear() - 1, 11, 31);
                fromDateInputs.forEach(function (input) {
                    input.value = formatDate(firstDayOfLastYear);
                });
                toDateInputs.forEach(function (input) {
                    input.value = formatDate(lastDayOfLastYear);
                });
                break;
            default:
                break;
        }
    }

    function formatDate(date) {
        var yyyy = date.getFullYear();
        var mm = String(date.getMonth() + 1).padStart(2, '0');
        var dd = String(date.getDate()).padStart(2, '0');
        return yyyy + '-' + mm + '-' + dd;
    }

    function getPreviousMonday() {
        var today = new Date();
        var dayOfWeek = today.getDay();

        var daysSincePreviousMonday = (dayOfWeek - 1 + 7) % 7;

        var daysToSubtract = daysSincePreviousMonday === 0 ? 7 : daysSincePreviousMonday;

        today.setDate(today.getDate() - daysToSubtract);

        return today;
    }

    function getMondayBeforeLast() {
        var previousMonday = getPreviousMonday();
        var dayOfWeek = previousMonday.getDay();

        previousMonday.setDate(previousMonday.getDate() - 7);

        return previousMonday;
    }

    function getLastSunday() {
        var today = new Date();
        var dayOfWeek = today.getDay();

        var daysToSubtract = dayOfWeek;

        var lastSunday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract);

        return lastSunday;
    }
</script>
